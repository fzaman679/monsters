{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAIaA,G,kBAAO,SAAAC,GAAK,OACrB,cAD2B,CAC3B,OAAKC,UAAU,iBAAf,UAEI,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,6BAEvB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,YCJKC,EAAW,SAAAR,GAAK,OAEzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAwBA,QAASA,GAArBA,EAAQC,UCNnBM,G,MAAa,SAAC,GAAD,IAAIC,EAAJ,EAAIA,YAAaC,EAAjB,EAAiBA,aAAjB,OACtB,uBACAZ,UAAW,SACXa,KAAK,SACLF,YAAcA,EACdG,SAAYF,MC+DDG,E,kDAhEb,aAAe,IAAD,8BACZ,gBAmCFH,aAAe,SAAAI,GACb,EAAKC,SAAU,CAACC,YAAaF,EAAMG,OAAOC,SAlC1C,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,gEA6BM,IAAD,OACjBI,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAK,OAAI,EAAKT,SAAU,CAACT,SAAUkB,S,+BASlC,IAAD,EAE0BC,KAAKN,MAA/Bb,EAFA,EAEAA,SAAUU,EAFV,EAEUA,YACXU,EAAmBpB,EAASqB,QAAQ,SAAA1B,GAAO,OACjDA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGhD,OACE,sBAAK9B,UAAU,MAAf,UACE,qDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAiBe,KAAKf,eAGxB,cAAC,EAAD,CAAUJ,SAAYoB,W,GA1DZI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a9dee0a8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css'; \r\n\r\nexport const Card = props => ( //functinal component that will return div \r\n    <div className='card-container'> \r\n\r\n        <img alt=\"monsters\" src={`https://robohash.org/${props.monster.id}1?set=set2&size=180x180`} /> \r\n\r\n        <h2> {props.monster.name} </h2>  \r\n        <p> {props.monster.email} </p>\r\n\r\n\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list-styles.css';\r\n\r\nimport {Card} from '../card/card.component';\r\n\r\n\r\nexport const CardList = props => (\r\n\r\n    <div className=\"card-list\"> \r\n        {props.monsters.map(monster => (\r\n            <Card key= {monster.id} monster={monster} />\r\n        ))}\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox =  ( { placeholder, handleChange } ) => (\r\n    <input \r\n    className ='search'\r\n    type='search'\r\n    placeholder= {placeholder}\r\n    onChange= { handleChange } \r\n    /> \r\n)\r\n  ","import React, {Component} from 'react';\nimport './App.css';\nimport  { CardList } from './components/card-list/card-list.component';\n\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = { \n      monsters: [], //leave it as an empty array at first \n      searchfield: ''\n      \n    }\n\n    //we are adding this because without this it would show as a failure\n    //this is robost way, therefore we do it with arrow functions \n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n \n  \n\n  /*same as \n  const monsters = this.state.monsters\n  const searchfield = this.state.searchfield\n  */\n\n  /*\n    git config --global user.email \"you@example.com\"\n    git config --global user.name \"Your Name\"\n\n  */\n\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')  //fetch form api request, inside goes url, then it returns a promise \n    .then( response => response.json() ) //getting response in JSON format \n    .then( users => this.setState( {monsters: users}) ) \n  }\n  \n  \n  handleChange = event => {\n    this.setState( {searchfield: event.target.value}  )\n  }\n  \n  \n  render() {\n\n    const {monsters, searchfield } = this.state;\n    const filteredMonsters = monsters.filter( monster => \n    monster.name.toLowerCase().includes(searchfield.toLowerCase()) ); //includes returns true or false, whether or not there is what we are looking for in an array\n\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters  Rolodex </h1>\n        <SearchBox \n          placeholder='search monsters'\n          handleChange = { this.handleChange } //move this.setState just incease we would want to use it again in the future \n        />\n\n        <CardList monsters = {filteredMonsters} />\n\n      </div>\n    );\n  };\n\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}